exit
g.occupied_neighbors(11)
g.occupied_neighbors(5)
g.occupied_neighbors(4)
g.occupied_neighbors(3)
g.occupied_neighbors(2)
continue
exit
g.occupied_neighbors(3)
continue
g.occupied_neighbors(3)
exit
g.occupied_neighbors(3)
continue
exit
g.occupied_spaces.select
g.occupied_spaces.select(2, 3)
g.occupied_spaces.extract(2, 3)
g.occupied_spaces.except(2, 3)
g.occupied_spaces.subhash(2, 3)
g.occupied_spaces.subash(2, 3)
g.occupied_spaces.slice(2, 3)
Hash#slice
Hash
g.occupied_spaces.slice(2, 3)
g.occupied_spaces
g.occupied_neighbors(2)
continue
g.occupied_neighbors(3)
continue
exit
self.occupied_spaces
continue
contiune
self.occupied_spaces
continue
copy_grid.occupied_spaces
self.occupied_spaces
continue
occupied_spaces
continue
occupied_spaces
continue
exit
continue
Grid.count
copy_grid.occupied_spaces
self.occupied_spaces
continue
self.occupied_spaces
continue
self.occupied_spaces
copy_grid.occupied_spaces
continue
copy_grid.occupied_spaces
self.occupied_spaces
copy_grid.occupied_spaces.object_id
self.occupied_spaces.object_id
continue
self.occupied_spaces.object_id
copy_grid.occupied_spaces.object_id
continue
exit
continue
g.occupied_spaces.object_id
grid_copy.occupied_spaces.object_id
continue
grid_copy.occupied_spaces.object_id
grid_copy.occupied_spaces
g.occupied_spaces.object_id
g.object_id
grid_copy.object_id
grid_copy.object_ids
grid_copy
exit
continue
exit
continue
g.deep_copy
exit
grid_copy.occupied_spaces.object_id
g.occupied_spaces.object_id
g.occupied_spaces
exit
g.occupied_spaces
g.class
g
g.occupied_spaces
g.occupied_spaces.object_id
g.spot
g.spots.object_id
g.sopts.object_id
g.object_id
grid_copy.object_id
continue
grid_copy == g
grid_copy
exit
g.winner
g.win_type
exit
g.occupied_neighbors(5)
continue
g.occupied_neighbors(2)
continue
g.win_type
g.winner
exit
(4)
(2)
g.occupied_neighbors(2)
g.occupied_neighbors(0)
exit
g.occupied_neighbors(0)
exit
g.occupied_neighbors(0)
exit
g.win_type
g.winner
g.ginner
g.winning_state?
exit
g.win_type
g.winner
exit
continue
g.win_type
g.winner
g.is_winning_move_for?('red', 0)
continue
g.is_winning_move_for?('red', 0)
exit
g.is_winning_move_for?('red', 0)
continue
g.win_type
g.winner
exit
g.Helpers
g.is_winning_move_for?('red', 0)
exit
g.is_winning_move_for?('red', 0)
is_winning_move_for?('red', 0)
exit
continue
g.winning_move_for?
nil || false 
nil || nil || nil
exit
continuee
g.win_type
g.winner
exit
g.win_type
g.winner
exit
continue
coneinut
g.win_type
continue
g.win_type
g.winner
b.winner
exit
g.win_type
continue
g.win_type
continue
g.occupied_spaces
g.columns_size - 1
g.columns_size -1
g.winner
g.nend
e.nend
g.endn
continue
g.nend
g.win_type
g.win_ty;e
exit
g.win_type
g.win_typwe
exit
g.win_type
exit
continue
g.win_type
exit
continue
g.win_type
g.winner
continue
g.win_type
g.winner
continue
g.win_type
g.winner
\
exit
continue
cobntinue
continue
g.winner
g.win_type
continue
conitnue
g.continue
g.win_type
exit
g.win_type
continue
g.win_type
continue
g.win_type
exit
g.win_type
exit
g.win_type
exit
g.win_type
exit
g.winner
g.win_type
exit
g.win_type
exit
g.win_type
exit
continue
g.winner
g.win_type
exit
g.win_type
exit
continue
pp g
g
pp g
g.occupied_spaces
g.occupied_spaves
g.winner
g.win_type
continue
g.win_type
exit
g.win_type
exit
g.win_type
exit
continue
g.winner
g.win_type
exit
g.win_type
g.win_ype
g.winner
exit
